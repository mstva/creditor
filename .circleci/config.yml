# This configuration has been automatically generated by the CircleCI Config SDK.
# For more information, see https://github.com/CircleCI-Public/circleci-config-sdk-ts
# SDK Version: 0.0.0-development

version: 2.1
setup: false
jobs:
  run_unit_tests:
    docker:
      - image: cimg/python:3.10
      - image: cimg/postgres:13.8
        environment:
          DATABASE_NAME: $POSTGRES_DB
          DATABASE_USER: $POSTGRES_USER
          DATABASE_PASSWORD: $POSTGRES_PASSWORD
          DATABASE_HOST: $POSTGRES_HOST
          DATABASE_PORT: $POSTGRES_PORT
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Install Packages
          working_directory: backend
          command: |-
            python3 -m venv venv;
            . venv/bin/activate;
            python -m pip install --upgrade pip;
            pip install poetry;
            poetry config virtualenvs.create false --local;
            poetry install;
      - run:
          name: Run Pytest
          working_directory: backend
          command: . venv/bin/activate; pytest;
  deploy_development_environment:
    machine:
      image: ubuntu-2204:2022.10.1
    resource_class: large
    steps:
      - checkout
      - run:
          name: Login to docker hub
          command: echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Build a docker image
          command: docker build -t $DOCKERHUB_USERNAME/creditor:development -f backend/Dockerfile backend
      - run:
          name: Push to docker hub
          command: docker push $DOCKERHUB_USERNAME/creditor:development
      - run:
          name: Get the environment variables from CircleCI
          command: python3 scripts/get_circleci_env.py --env=development --token=$CIRCLE_TOKEN --owner=$CIRCLE_OWNER_ID
      - run:
          name: Append docker username to env file
          command: echo "DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME" >> .env.development
      - run:
          name: Copy the env file and run script to the server
          command: rsync .env.development scripts/run_containers.py root@$SERVER_IP:/root
      - run:
          name: Run the script
          command: ssh root@$SERVER_IP 'source .env.development && python3 run_containers.py --env=development --image=$DOCKERHUB_USERNAME/creditor'
  deploy_staging_environment:
    machine:
      image: ubuntu-2204:2022.10.1
    resource_class: large
    steps:
      - checkout
      - run:
          name: Login to docker hub
          command: echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Build a docker image
          command: docker build -t $DOCKERHUB_USERNAME/creditor:staging -f backend/Dockerfile backend
      - run:
          name: Push to docker hub
          command: docker push $DOCKERHUB_USERNAME/creditor:staging
      - run:
          name: Get the environment variables from CircleCI
          command: python3 scripts/get_circleci_env.py --env=staging --token=$CIRCLE_TOKEN --owner=$CIRCLE_OWNER_ID
      - run:
          name: Append docker username to env file
          command: echo "DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME" >> .env.staging
      - run:
          name: Copy the env file and run script to the server
          command: rsync .env.staging scripts/run_containers.py root@$SERVER_IP:/root
      - run:
          name: Run the script
          command: ssh root@$SERVER_IP 'source .env.staging && python3 run_containers.py --env=staging --image=$DOCKERHUB_USERNAME/creditor'
  deploy_production_environment:
    machine:
      image: ubuntu-2204:2022.10.1
    resource_class: large
    steps:
      - checkout
      - run:
          name: Login to docker hub
          command: echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Build a docker image
          command: docker build -t $DOCKERHUB_USERNAME/creditor:production -f backend/Dockerfile backend
      - run:
          name: Push to docker hub
          command: docker push $DOCKERHUB_USERNAME/creditor:production
      - run:
          name: Get the environment variables from CircleCI
          command: python3 scripts/get_circleci_env.py --env=production --token=$CIRCLE_TOKEN --owner=$CIRCLE_OWNER_ID
      - run:
          name: Append docker username to env file
          command: echo "DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME" >> .env.production
      - run:
          name: Copy the env file and run script to the server
          command: rsync .env.production scripts/run_containers.py root@$SERVER_IP:/root
      - run:
          name: Run the script
          command: ssh root@$SERVER_IP 'source .env.production && python3 run_containers.py --env=production --image=$DOCKERHUB_USERNAME/creditor'
workflows:
  deploy:
    jobs:
      - run_unit_tests:
          context:
            - creditor-common-context
          filters:
            branches:
              only:
                - main
      - deploy_development_environment:
          context:
            - creditor-common-context
            - creditor-development-context
          filters:
            branches:
              only:
                - main
          requires:
            - run_unit_tests
      - deploy_staging_environment:
          context:
            - creditor-common-context
            - creditor-staging-context
          filters:
            branches:
              only:
                - main
          requires:
            - run_unit_tests
            - deploy_development_environment
      - deploy_production_environment:
          context:
            - creditor-common-context
            - creditor-production-context
          filters:
            branches:
              only:
                - main
          requires:
            - run_unit_tests
            - deploy_staging_environment
